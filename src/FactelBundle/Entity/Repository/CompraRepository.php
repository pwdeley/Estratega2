<?php

namespace FactelBundle\Entity\Repository;

/**
 * CompraRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompraRepository extends \Doctrine\ORM\EntityRepository {

    public function findCompraById($id) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select("compra,  establecimiento, detallesCompra")
                ->from("FactelBundle:Compra", "compra")
                ->join("compra.establecimiento", "establecimiento")
                ->join("compra.detallesCompra", "detallesCompra")
                ->where('compra.id = :id')
                ->setParameter('id', $id);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function cantidadCompras($idEstablecimiento, $idEmisor) {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select("COUNT(compra.id)")
                ->from("FactelBundle:Compra", "compra");
        if ($idEmisor == null) {
            $qb->join("compra.establecimiento", "establecimiento");
            $qb->where('establecimiento.id = :idEstablecimiento');
            $qb->setParameter("idEstablecimiento", $idEstablecimiento);
        } else {
            $qb->join("compra.emisor", "emisor");
            $qb->where('emisor.id = :idEmisor');
            $qb->setParameter("idEmisor", $idEmisor);
        }
        try {
            return $qb->getQuery()->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return 0;
        }
    }

    public function findCompras($search, $start, $limit, $idEstablecimiento, $idEmisor) {
        $datos = explode("&", $search);
        $fechaInicial = "";
        $fechaFinal = "";
        if (count($datos) == 3) {
            $search = $datos[2];
            $fechaInicial = $datos[0];
            $fechaFinal = $datos[1];
        }

        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select("compra, estab")
                ->from("FactelBundle:Compra", "compra")
                ->join("compra.emisor", "emisor")
                ->join("compra.establecimiento", "estab");
        $qb->setMaxResults($limit);
        $qb->setFirstResult($start);
        if ($search != "") {
            $qb->where(
                            $qb->expr()->like('compra.nombreComercialProveedor', $qb->expr()->literal('%' . $search . '%'))
                    )->orWhere(
                            $qb->expr()->like('compra.razonSocialProveedor', $qb->expr()->literal('%' . $search . '%'))
                    )
                    ->orWhere(
                            $qb->expr()->like('compra.claveAcceso', $qb->expr()->literal('%' . $search . '%'))
                    )
                    ->orWhere(
                            $qb->expr()->like('compra.numeroFactura', $qb->expr()->literal('%' . $search . '%'))
                    )
                    ->orWhere(
                            $qb->expr()->like('compra.identificacionProveedor', $qb->expr()->literal('%' . $search . '%'))
                    )
                    ->orWhere(
                            $qb->expr()->like('compra.numeroAutorizacion', $qb->expr()->literal('%' . $search . '%'))
            );
        }

        if ($idEmisor == null) {
            $qb->andWhere('estab.id = :idEstablecimiento');
            $qb->setParameter("idEstablecimiento", $idEstablecimiento);
        } else {
            $qb->andWhere('emisor.id = :idEmisor');
            $qb->setParameter("idEmisor", $idEmisor);
        }

        $qb->orderBy("compra.id", "DESC");
        return $qb->getQuery()->getResult();
    }

}
